spring:
  config:
    import: application-secret.yml

  application:
    name: "trendlapse"

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    #    show-sql: true
    open-in-view: false
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        highlight_sql: true
        format_sql: true
        default_batch_fetch_size: 100
    defer-datasource-initialization: true

  servlet:
    multipart:
      max-file-size: 100MB
      max-request-size: 100MB

  output:
    ansi:
      enabled: always

management:
  endpoints:
    web:
      exposure:
        include: prometheus, health

youtube-data-api:
  base-url: https://www.googleapis.com/youtube/v3
  max-result-count: 50
  use-log: false
  max-retry-count: 5

collect-scheduler:
  collect-size: 100
  collect-cron: '0 20 * * * *'
  use-log: false

collector:
  use-log: false

purge-scheduler:
  expiration-period: 30d
  purge-cron: '0 0 0 * * *'
  batch-size: 1000
  use-log: false

elapsed-time-logging:
  tasks:
    - pointcut: "execution(* io.github.hamsteak.trendlapse.collector.domain.TrendingCollector.collect(..))"
      name: "Trending Collect"
    - pointcut: "execution(* io.github.hamsteak.trendlapse.collector.fetcher.TrendingFetcher.fetch(..))"
      name: "Trending Fetch"
    - pointcut: "execution(* io.github.hamsteak.trendlapse.collector.storer.TrendingStorer.store(..))"
      name: "Trending Store"

    - pointcut: "execution(* io.github.hamsteak.trendlapse.collector.domain.VideoCollector.collect(..))"
      name: "Video Collect"
    - pointcut: "execution(* io.github.hamsteak.trendlapse.collector.fetcher.VideoFetcher.fetch(..))"
      name: "Video Fetch"
    - pointcut: "execution(* io.github.hamsteak.trendlapse.collector.storer.VideoStorer.store(..))"
      name: "Video Store"

    - pointcut: "execution(* io.github.hamsteak.trendlapse.collector.domain.ChannelCollector.collect(..))"
      name: "Channel Collect"
    - pointcut: "execution(* io.github.hamsteak.trendlapse.collector.fetcher.ChannelFetcher.fetch(..))"
      name: "Channel Fetch"
    - pointcut: "execution(* io.github.hamsteak.trendlapse.collector.storer.ChannelStorer.store(..))"
      name: "Channel Store"

    - pointcut: "execution(* io.github.hamsteak.trendlapse.purger.domain.TrendingPurgeScheduler.purge(..))"
      name: "Trending Purge"

    - pointcut: "execution(* io.github.hamsteak.trendlapse.trending.service.TrendingService.searchTrending(..))"
      name: "Trending Search (Caching)"
    - pointcut: "execution(* io.github.hamsteak.trendlapse.trending.service.TrendingService.searchTrendingBatchSize(..))"
      name: "Trending Search (Batch Size)"
    - pointcut: "execution(* io.github.hamsteak.trendlapse.trending.service.TrendingService.searchTrendingFetchJoin(..))"
      name: "Trending Search (Fetch Join)"
    - pointcut: "execution(* io.github.hamsteak.trendlapse.trending.service.TrendingService.searchTrendingJoinDTO(..))"
      name: "Trending Search (Join + DTO)"


#logging:
#  level:
#    org.hibernate.SQL: debug
#    org.hibernate.orm.jdbc.bind: trace

server:
  compression:
    enabled: true
    mime-types: application/json
    min-response-size: 1024
